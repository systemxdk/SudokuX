/**
 * @author: Steffen Beck
 * @snr: s211091
 */

package Gui.Panels;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.MatteBorder;

import Sudoku.Game;

public class Plate extends JPanel {

	private static final long serialVersionUID = -3960561965696637301L; //Auto-generated by Eclipse

	/**
	 * The constructor for the Plate class
	 */
	public Plate() {
		GridBagLayout layout = new GridBagLayout();
		setLayout(layout);
		
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.fill = GridBagConstraints.BOTH;
		gbc.weightx = 9;
		gbc.weighty = 9;
		gbc.insets = new Insets(0, 0, 0, 0);
		
		int position = 1;
        for (int row = 1; row < 10; row++) {
            for (int col = 1; col < 10; col++) {
                gbc.gridx = col;
                gbc.gridy = row;

                Cell cell = new Cell();
                
                cell.cellPosition = position;
                cell.cellRow = row;
                cell.cellCol = col;
                
                add(cell, gbc);

                boolean upperLeftCorner = row == 1 && col == 1;
                boolean upperRightCorner = row == 1 && col == 9;

                boolean lowerLeftCorner = row == 9 && col == 1;
                boolean lowerRightCorner = row == 9 && col == 9;
                
                boolean upperRow = row == 1;
                boolean lowerRow = row == 9;
                
                boolean leftColumn = col == 1;
                boolean rightColumn = col == 9;
                
                Border border = null;
                if (upperLeftCorner) { //Corner
                	border = new MatteBorder(5, 5, 0, 0, Color.BLACK);
                } else if (upperRightCorner) { //Corner
                	border = new MatteBorder(5, 1, 0, 5, Color.BLACK);
                } else { //Regular cell

                	//Extra thick left border, the in-betweens
                	int leftBorderWidth = (col == 4 || col == 7) ? 3 : 1;
                	
                	//Extra thick top border, the in-betweens
                	int topBorderWidth = (row == 4 || row == 7) ? 3 : 1;
                	
                	if (upperRow) {
                    	border = new MatteBorder(5, leftBorderWidth, 0, 0, Color.BLACK);
                	} else if (lowerRow) {
                		
                		if (lowerLeftCorner) { //Corner
                			border = new MatteBorder(1, 5, 5, 0, Color.BLACK);
                		} else if (lowerRightCorner) { //Corner
                			border = new MatteBorder(1, leftBorderWidth, 5, 5, Color.BLACK);
                		} else {
                        	border = new MatteBorder(topBorderWidth, leftBorderWidth, 5, 0, Color.BLACK);
                		}
                	} else {
                		if (leftColumn) {
                        	border = new MatteBorder(topBorderWidth, 5, 0, 0, Color.BLACK);
                		} else if (rightColumn) {
                        	border = new MatteBorder(topBorderWidth, leftBorderWidth, 0, 5, Color.BLACK);
                		} else {
                        	border = new MatteBorder(topBorderWidth, leftBorderWidth, 0, 0, Color.BLACK);
                		}
                		
                	}
                }
                
                cell.setBorder(border);
                
                add(cell, gbc);
                
                position++;
            }
        }
	}
	
	
	/**
	 * Plate-wise lock of all cells on the sudoku plate.
	 * Locked mode prevents user from inserting values, for example when a board is complete.
	 */
	public void lock() {
		for (int i = 1; i <= Game.CELLS; i++) {
			Cell c = getCell(i);
			c.lock();
		}
	}
	
	/**
	 * Method for getting a cell on a given position from 1-81.
	 * 
	 * @param position The integer position on the sudoku board
	 * @return The cell if found
	 */
	public Cell getCell(int position) {
		Component[] components = getComponents();
		
		Cell cell = null;
		for (int i = 0; i < components.length; i++) {
			
			Cell c = (Cell)components[i];
			
			if (c.cellPosition == position) {
				cell = c;
			}
		}
		
		return cell;
	}
	
	/**
	 * Method for resetting all cells on the plate
	 */
	public void clear() {
		Component[] components = getComponents();
		for (int i = 0; i < components.length; i++) {
			
			Cell c = (Cell)components[i];
			c.set(null, false);
		}
	}
	
}

