/**
 * @author: Steffen Beck
 * @snr: s211091
 */

package Gui.Tables.Models;

import java.util.ArrayList;
import java.util.Vector;

import javax.swing.table.AbstractTableModel;

import Constants.Language;
import Sudoku.Game;
import Sudoku.Player;
import Sudoku.Score;

public class DataModelLocal extends AbstractTableModel implements IDataModel {
	
	private static final long serialVersionUID = -3476254332440805911L; //Auto-generated by Eclipse
	
	protected Vector<String> data;
	protected Vector<String> columnNames ;
	
	public DataModelLocal() {
		load();
	}
	
	@Override
	public int getRowCount() {
		return data.size() / getColumnCount();
	}
	
	@Override
	public int getColumnCount() {
		return columnNames.size();
	}
	
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		
		return (String)data.elementAt((rowIndex * getColumnCount()) + columnIndex);
	}
	
	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex) {
		return false;
	}
	
	@Override
	public void load() {
		
		data = new Vector<String>();
	    columnNames = new Vector<String>();
	    
	    try {
	    	
		    Score score = new Score();
		    ArrayList<Player> scores = score.getHighscores();
		    
		    scores.sort(null);
		    
		    if (scores.size() > 0) {

			    columnNames.addElement("");
			    columnNames.addElement("");
			    columnNames.addElement("");
			    
		    } else {
			    columnNames.addElement("#");
			    data.addElement(Language.LANG_TEXT_HIGHSCORES_NONE);
		    }
		    
		    Integer placement = 0;
		    for (Player p:scores) {
			    data.addElement(Integer.toString(++placement));
			    data.addElement(p.name);
			    data.addElement(Game.formatTime(p.seconds));
		    }
		    
	    } catch (Exception e) {
	    	
	    	columnNames.clear();
	    	data.clear();

	    	columnNames.addElement("");
	    	
	    	String[] messages = e.getMessage().split("\\n");
		    
		    System.out.println( messages.length);
		    for (int m = 0; m < messages.length; m++) {
		    	data.addElement(messages[m]);
		    }
		    
	    }
	}
}
